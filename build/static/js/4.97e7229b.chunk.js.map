{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","Pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","form","onFocus","console","log","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","NewQuote","useHttp","addQuote","sendRequest","status","history","useNavigate","useEffect","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,iFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCqD/BC,EAlDG,SAACL,GAEjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBAerB,OACE,cAAC,WAAD,UAEE,cAAC,EAAD,UACE,uBACEN,UAAWC,IAAQO,KACnBC,QATmB,WACzBC,QAAQC,IAAI,WASNC,SApBR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBV,EAAeW,QAAQC,MACvCC,EAAcX,EAAaS,QAAQC,MAIzClB,EAAMoB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAS5C,UAKGnB,EAAMuB,WACL,qBAAKtB,UAAWC,IAAQsB,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAKxB,UAAWC,IAAQwB,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKxB,OAEtC,sBAAKL,UAAWC,IAAQwB,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKtB,OAEpC,qBAAKP,UAAWC,IAAQ8B,QAAxB,SACE,wBAAQ/B,UAAU,MAAlB,iC,gBCzBGgC,UAlBE,WACf,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAChBC,qBAAU,WACO,cAAXH,GACFC,EAAQ,aAET,CAACD,EAAQC,IAOZ,OACE,cAAC,EAAD,CAAWf,UAAsB,YAAXc,EAAsBjB,WAPtB,SAACqB,GAEvBL,EAAYK","file":"static/js/4.97e7229b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__35YFG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__1VWaC\",\"loading\":\"QuoteForm_loading__3UDhs\",\"control\":\"QuoteForm_control__2Um9R\",\"actions\":\"QuoteForm_actions__2syTg\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef } from \"react\";\n// import { Prompt } from \"react-router-dom\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  // const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n  const formFocusedHandler = () => {\n    console.log(\"Focus!\");\n  };\n  return (\n    <Fragment>\n      {/* <Prompt when={isEntering} /> */}\n      <Card>\n        <form\n          className={classes.form}\n          onFocus={formFocusedHandler}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className=\"btn\">Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../Hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\nconst NewQuote = () => {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const history = useNavigate();\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history(\"/quotes\");\r\n    }\r\n  }, [status, history]);\r\n  const AddQuoteHandler = (quoteData) => {\r\n    // console.log(quoteData);\r\n    sendRequest(quoteData);\r\n    // history.push(\"/quotes\");\r\n    // history(\"/quotes\");\r\n  };\r\n  return (\r\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={AddQuoteHandler} />\r\n  );\r\n};\r\nexport default NewQuote;\r\n"],"sourceRoot":""}